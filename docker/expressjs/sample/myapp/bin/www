#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.HTTP_PORT || '80');
var httpsPort = normalizePort(process.env.HTTPS_PORT || '443');
app.set('httpPort', httpPort);
app.set('httpsPort', httpsPort);

/**
 * Set https cert options
 */

const credential = {
  key: fs.readFileSync(__dirname + '/../sslcert/kiramarsa.xyz.key', 'utf8'),
  cert: fs.readFileSync(__dirname + '/../sslcert/kiramarsa.xyz.cert', 'utf8')
}

/**
 * Create HTTP/HTTPS server.
 */

var httpServer = http.createServer(app);
var httpsServer = https.createServer(credential, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onListening(httpPort));
httpServer.on('listening', onListening(httpServer));

httpsServer.listen(httpsPort);
httpsServer.on('error', onError(httpsPort));
httpsServer.on('listening', onListening(httpsServer));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for server "error" event.
 */

function onError(port) {
  return function(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for server "listening" event.
 */

function onListening(server) {
  return function() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  };
}
